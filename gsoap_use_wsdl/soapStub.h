/* soapStub.h
   Generated by gSOAP 2.8.96 for face.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include <vector>
#define SOAP_NAMESPACE_OF_ns2	"http://tempuri.org/ns.xsd"

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"
#if GSOAP_VERSION != 20896
# error "GSOAP VERSION 20896 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes, Structs and Unions                                                *
 *                                                                            *
\******************************************************************************/

class SOAP_ENC__Array;	/* face.h:144 */
class ns2__SingleFaceInfo;	/* face.h:160 */
class ns2__FaceRes;	/* face.h:162 */
class Array10Offloat;	/* face.h:164 */
struct ns2__FaceDetectByImgpathResponse;	/* face.h:346 */
struct ns2__FaceDetectByImgpath;	/* face.h:408 */
struct ns2__FaceDetectByBase64Response;	/* face.h:419 */
struct ns2__FaceDetectByBase64;	/* face.h:481 */

/* face.h:144 */
#ifndef SOAP_TYPE_SOAP_ENC__Array
#define SOAP_TYPE_SOAP_ENC__Array (8)
/* Sequence of SOAP-ENC:Array schema type: */
class SOAP_CMAC SOAP_ENC__Array {
      public:
        char **__ptr;
        int __size;
      public:
        /// Return unique type id SOAP_TYPE_SOAP_ENC__Array
        virtual long soap_type(void) const { return SOAP_TYPE_SOAP_ENC__Array; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type SOAP_ENC__Array, default initialized and not managed by a soap context
        virtual SOAP_ENC__Array *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(SOAP_ENC__Array); }
      public:
        /// Constructor with default initializations
        SOAP_ENC__Array() : __ptr(), __size() { }
        virtual ~SOAP_ENC__Array() { }
        /// Friend allocator used by soap_new_SOAP_ENC__Array(struct soap*, int)
        friend SOAP_FMAC1 SOAP_ENC__Array * SOAP_FMAC2 soap_instantiate_SOAP_ENC__Array(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* face.h:160 */
#ifndef SOAP_TYPE_ns2__SingleFaceInfo
#define SOAP_TYPE_ns2__SingleFaceInfo (10)
/* complex XML schema type 'ns2:SingleFaceInfo': */
class SOAP_CMAC ns2__SingleFaceInfo {
      public:
        /// Required element 'x1' of XML schema type 'xsd:float'
        float x1;
        /// Required element 'y1' of XML schema type 'xsd:float'
        float y1;
        /// Required element 'x2' of XML schema type 'xsd:float'
        float x2;
        /// Required element 'y2' of XML schema type 'xsd:float'
        float y2;
        /// Required element 'score' of XML schema type 'xsd:float'
        float score;
        /// Required element 'landmarks' of XML schema type 'ArrayOffloat'
        Array10Offloat *landmarks;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns2__SingleFaceInfo
        virtual long soap_type(void) const { return SOAP_TYPE_ns2__SingleFaceInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns2__SingleFaceInfo, default initialized and not managed by a soap context
        virtual ns2__SingleFaceInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns2__SingleFaceInfo); }
      public:
        /// Constructor with default initializations
        ns2__SingleFaceInfo() : x1(), y1(), x2(), y2(), score(), landmarks(), soap() { }
        virtual ~ns2__SingleFaceInfo() { }
        /// Friend allocator used by soap_new_ns2__SingleFaceInfo(struct soap*, int)
        friend SOAP_FMAC1 ns2__SingleFaceInfo * SOAP_FMAC2 soap_instantiate_ns2__SingleFaceInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* face.h:162 */
#ifndef SOAP_TYPE_ns2__FaceRes
#define SOAP_TYPE_ns2__FaceRes (11)
/* complex XML schema type 'ns2:FaceRes': */
class SOAP_CMAC ns2__FaceRes {
      public:
        /// Optional element 'item' of XML schema type 'ns2:SingleFaceInfo'
        std::vector<ns2__SingleFaceInfo *> item;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns2__FaceRes
        virtual long soap_type(void) const { return SOAP_TYPE_ns2__FaceRes; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns2__FaceRes, default initialized and not managed by a soap context
        virtual ns2__FaceRes *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns2__FaceRes); }
      public:
        /// Constructor with default initializations
        ns2__FaceRes() : item(), soap() { }
        virtual ~ns2__FaceRes() { }
        /// Friend allocator used by soap_new_ns2__FaceRes(struct soap*, int)
        friend SOAP_FMAC1 ns2__FaceRes * SOAP_FMAC2 soap_instantiate_ns2__FaceRes(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* face.h:164 */
#ifndef SOAP_TYPE_Array10Offloat
#define SOAP_TYPE_Array10Offloat (12)
/* SOAP encoded array of xsd:float schema type: */
class SOAP_CMAC Array10Offloat {
      public:
        float *__ptritem;
        int __size;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_Array10Offloat
        virtual long soap_type(void) const { return SOAP_TYPE_Array10Offloat; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type Array10Offloat, default initialized and not managed by a soap context
        virtual Array10Offloat *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(Array10Offloat); }
      public:
        /// Constructor with default initializations
        Array10Offloat() : __ptritem(), __size(), soap() { }
        virtual ~Array10Offloat() { }
        /// Friend allocator used by soap_new_Array10Offloat(struct soap*, int)
        friend SOAP_FMAC1 Array10Offloat * SOAP_FMAC2 soap_instantiate_Array10Offloat(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* face.h:346 */
#ifndef SOAP_TYPE_ns2__FaceDetectByImgpathResponse
#define SOAP_TYPE_ns2__FaceDetectByImgpathResponse (19)
/* complex XML schema type 'ns2:FaceDetectByImgpathResponse': */
struct SOAP_CMAC ns2__FaceDetectByImgpathResponse {
      public:
        /** Optional element 'face-res' of XML schema type 'ns2:FaceRes' */
        ns2__FaceRes *face_res;
      public:
        /** Return unique type id SOAP_TYPE_ns2__FaceDetectByImgpathResponse */
        long soap_type() const { return SOAP_TYPE_ns2__FaceDetectByImgpathResponse; }
        /** Constructor with member initializations */
        ns2__FaceDetectByImgpathResponse() : face_res() { }
        /** Friend allocator */
        friend SOAP_FMAC1 ns2__FaceDetectByImgpathResponse * SOAP_FMAC2 soap_instantiate_ns2__FaceDetectByImgpathResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* face.h:408 */
#ifndef SOAP_TYPE_ns2__FaceDetectByImgpath
#define SOAP_TYPE_ns2__FaceDetectByImgpath (24)
/* complex XML schema type 'ns2:FaceDetectByImgpath': */
struct SOAP_CMAC ns2__FaceDetectByImgpath {
      public:
        /** Required element 'img-path' of XML schema type 'xsd:string' */
        std::string img_path;
      public:
        /** Return unique type id SOAP_TYPE_ns2__FaceDetectByImgpath */
        long soap_type() const { return SOAP_TYPE_ns2__FaceDetectByImgpath; }
        /** Constructor with member initializations */
        ns2__FaceDetectByImgpath() : img_path() { }
        /** Friend allocator */
        friend SOAP_FMAC1 ns2__FaceDetectByImgpath * SOAP_FMAC2 soap_instantiate_ns2__FaceDetectByImgpath(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* face.h:419 */
#ifndef SOAP_TYPE_ns2__FaceDetectByBase64Response
#define SOAP_TYPE_ns2__FaceDetectByBase64Response (25)
/* complex XML schema type 'ns2:FaceDetectByBase64Response': */
struct SOAP_CMAC ns2__FaceDetectByBase64Response {
      public:
        /** Optional element 'face-res' of XML schema type 'ns2:FaceRes' */
        ns2__FaceRes *face_res;
      public:
        /** Return unique type id SOAP_TYPE_ns2__FaceDetectByBase64Response */
        long soap_type() const { return SOAP_TYPE_ns2__FaceDetectByBase64Response; }
        /** Constructor with member initializations */
        ns2__FaceDetectByBase64Response() : face_res() { }
        /** Friend allocator */
        friend SOAP_FMAC1 ns2__FaceDetectByBase64Response * SOAP_FMAC2 soap_instantiate_ns2__FaceDetectByBase64Response(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* face.h:481 */
#ifndef SOAP_TYPE_ns2__FaceDetectByBase64
#define SOAP_TYPE_ns2__FaceDetectByBase64 (28)
/* complex XML schema type 'ns2:FaceDetectByBase64': */
struct SOAP_CMAC ns2__FaceDetectByBase64 {
      public:
        /** Required element 'img-base64' of XML schema type 'xsd:string' */
        std::string img_base64;
      public:
        /** Return unique type id SOAP_TYPE_ns2__FaceDetectByBase64 */
        long soap_type() const { return SOAP_TYPE_ns2__FaceDetectByBase64; }
        /** Constructor with member initializations */
        ns2__FaceDetectByBase64() : img_base64() { }
        /** Friend allocator */
        friend SOAP_FMAC1 ns2__FaceDetectByBase64 * SOAP_FMAC2 soap_instantiate_ns2__FaceDetectByBase64(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* face.h:542 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (29)
/* SOAP_ENV__Header: */
struct SOAP_CMAC SOAP_ENV__Header {
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Header */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Header; }
        /** Constructor with member initializations */
        SOAP_ENV__Header() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* face.h:542 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (30)
/* Type SOAP_ENV__Code is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* SOAP_ENV__Code: */
struct SOAP_CMAC SOAP_ENV__Code {
      public:
        /** Optional element 'SOAP-ENV:Value' of XML schema type 'xsd:QName' */
        char *SOAP_ENV__Value;
        /** Optional element 'SOAP-ENV:Subcode' of XML schema type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Subcode;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Code */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Code; }
        /** Constructor with member initializations */
        SOAP_ENV__Code() : SOAP_ENV__Value(), SOAP_ENV__Subcode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* face.h:542 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (32)
/* SOAP_ENV__Detail: */
struct SOAP_CMAC SOAP_ENV__Detail {
      public:
        char *__any;
        /** Any type of element 'fault' assigned to fault with its SOAP_TYPE_<typename> assigned to __type */
        /** Do not create a cyclic data structure through this member unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
        int __type;
        void *fault;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Detail */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Detail; }
        /** Constructor with member initializations */
        SOAP_ENV__Detail() : __any(), __type(), fault() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* face.h:542 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (35)
/* SOAP_ENV__Reason: */
struct SOAP_CMAC SOAP_ENV__Reason {
      public:
        /** Optional element 'SOAP-ENV:Text' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Text;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Reason */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Reason; }
        /** Constructor with member initializations */
        SOAP_ENV__Reason() : SOAP_ENV__Text() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* face.h:542 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (36)
/* SOAP_ENV__Fault: */
struct SOAP_CMAC SOAP_ENV__Fault {
      public:
        /** Optional element 'faultcode' of XML schema type 'xsd:QName' */
        char *faultcode;
        /** Optional element 'faultstring' of XML schema type 'xsd:string' */
        char *faultstring;
        /** Optional element 'faultactor' of XML schema type 'xsd:string' */
        char *faultactor;
        /** Optional element 'detail' of XML schema type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *detail;
        /** Optional element 'SOAP-ENV:Code' of XML schema type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Code;
        /** Optional element 'SOAP-ENV:Reason' of XML schema type 'SOAP-ENV:Reason' */
        struct SOAP_ENV__Reason *SOAP_ENV__Reason;
        /** Optional element 'SOAP-ENV:Node' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Node;
        /** Optional element 'SOAP-ENV:Role' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Role;
        /** Optional element 'SOAP-ENV:Detail' of XML schema type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *SOAP_ENV__Detail;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Fault */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Fault; }
        /** Constructor with member initializations */
        SOAP_ENV__Fault() : faultcode(), faultstring(), faultactor(), detail(), SOAP_ENV__Code(), SOAP_ENV__Reason(), SOAP_ENV__Node(), SOAP_ENV__Role(), SOAP_ENV__Detail() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* (built-in):0 */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
typedef char *_XML;
#endif

/* (built-in):0 */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
typedef char *_QName;
#endif

/******************************************************************************\
 *                                                                            *
 * Serializable Types                                                         *
 *                                                                            *
\******************************************************************************/


/* char has binding name 'byte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif

/* int has binding name 'int' for type 'xsd:int' */
#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif

/* float has binding name 'float' for type 'xsd:float' */
#ifndef SOAP_TYPE_float
#define SOAP_TYPE_float (13)
#endif

/* std::string has binding name 'std__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (21)
#endif

/* Array10Offloat has binding name 'Array10Offloat' for type 'xsd:float' */
#ifndef SOAP_TYPE_Array10Offloat
#define SOAP_TYPE_Array10Offloat (12)
#endif

/* ns2__FaceRes has binding name 'ns2__FaceRes' for type 'ns2:FaceRes' */
#ifndef SOAP_TYPE_ns2__FaceRes
#define SOAP_TYPE_ns2__FaceRes (11)
#endif

/* ns2__SingleFaceInfo has binding name 'ns2__SingleFaceInfo' for type 'ns2:SingleFaceInfo' */
#ifndef SOAP_TYPE_ns2__SingleFaceInfo
#define SOAP_TYPE_ns2__SingleFaceInfo (10)
#endif

/* SOAP_ENC__Array has binding name 'SOAP_ENC__Array' for type 'SOAP-ENC:Array' */
#ifndef SOAP_TYPE_SOAP_ENC__Array
#define SOAP_TYPE_SOAP_ENC__Array (8)
#endif

/* struct SOAP_ENV__Fault has binding name 'SOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (36)
#endif

/* struct SOAP_ENV__Reason has binding name 'SOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (35)
#endif

/* struct SOAP_ENV__Detail has binding name 'SOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (32)
#endif

/* struct SOAP_ENV__Code has binding name 'SOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (30)
#endif

/* struct SOAP_ENV__Header has binding name 'SOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (29)
#endif

/* struct ns2__FaceDetectByBase64 has binding name 'ns2__FaceDetectByBase64' for type 'ns2:FaceDetectByBase64' */
#ifndef SOAP_TYPE_ns2__FaceDetectByBase64
#define SOAP_TYPE_ns2__FaceDetectByBase64 (28)
#endif

/* struct ns2__FaceDetectByBase64Response has binding name 'ns2__FaceDetectByBase64Response' for type 'ns2:FaceDetectByBase64Response' */
#ifndef SOAP_TYPE_ns2__FaceDetectByBase64Response
#define SOAP_TYPE_ns2__FaceDetectByBase64Response (25)
#endif

/* struct ns2__FaceDetectByImgpath has binding name 'ns2__FaceDetectByImgpath' for type 'ns2:FaceDetectByImgpath' */
#ifndef SOAP_TYPE_ns2__FaceDetectByImgpath
#define SOAP_TYPE_ns2__FaceDetectByImgpath (24)
#endif

/* struct ns2__FaceDetectByImgpathResponse has binding name 'ns2__FaceDetectByImgpathResponse' for type 'ns2:FaceDetectByImgpathResponse' */
#ifndef SOAP_TYPE_ns2__FaceDetectByImgpathResponse
#define SOAP_TYPE_ns2__FaceDetectByImgpathResponse (19)
#endif

/* struct SOAP_ENV__Reason * has binding name 'PointerToSOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (38)
#endif

/* struct SOAP_ENV__Detail * has binding name 'PointerToSOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (37)
#endif

/* struct SOAP_ENV__Code * has binding name 'PointerToSOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (31)
#endif

/* ns2__FaceRes * has binding name 'PointerTons2__FaceRes' for type 'ns2:FaceRes' */
#ifndef SOAP_TYPE_PointerTons2__FaceRes
#define SOAP_TYPE_PointerTons2__FaceRes (20)
#endif

/* float * has binding name 'PointerTofloat' for type 'xsd:float' */
#ifndef SOAP_TYPE_PointerTofloat
#define SOAP_TYPE_PointerTofloat (18)
#endif

/* ns2__SingleFaceInfo * has binding name 'PointerTons2__SingleFaceInfo' for type 'ns2:SingleFaceInfo' */
#ifndef SOAP_TYPE_PointerTons2__SingleFaceInfo
#define SOAP_TYPE_PointerTons2__SingleFaceInfo (16)
#endif

/* Array10Offloat * has binding name 'PointerToArray10Offloat' for type 'xsd:float' */
#ifndef SOAP_TYPE_PointerToArray10Offloat
#define SOAP_TYPE_PointerToArray10Offloat (14)
#endif

/* char ** has binding name 'PointerTo_XML' for type '' */
#ifndef SOAP_TYPE_PointerTo_XML
#define SOAP_TYPE_PointerTo_XML (9)
#endif

/* _QName has binding name '_QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
#endif

/* _XML has binding name '_XML' for type '' */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
#endif

/* char * has binding name 'string' for type 'xsd:string' */
#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif

/* std::vector<ns2__SingleFaceInfo *>  has binding name 'std__vectorTemplateOfPointerTons2__SingleFaceInfo' for type 'ns2:SingleFaceInfo' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__SingleFaceInfo
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__SingleFaceInfo (17)
#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
