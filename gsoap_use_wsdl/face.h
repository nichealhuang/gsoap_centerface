/* face.h
   Generated by wsdl2h 2.8.96 from face.wsdl and typemap.dat
   2019-12-17 07:33:28 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/**

@page page_notes Notes

@note HINTS:
 - Run soapcpp2 on face.h to generate the SOAP/XML processing logic:
   Use soapcpp2 -I to specify paths for #import
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Edit 'typemap.dat' to control namespace bindings and type mappings:
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -c to generate pure C code.
 - Use wsdl2h -R to include the REST operations defined by the WSDLs.
 - Use wsdl2h -O3 or -O4 to optimize by removing unused schema components.
 - Use wsdl2h -d to enable DOM support for xsd:any and xsd:anyType.
 - Use wsdl2h -F to simulate struct-type derivation in C (also works in C++).
 - Use wsdl2h -f to generate flat C++ class hierarchy, removes type derivation.
 - Use wsdl2h -g to generate top-level root elements with readers and writers.
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Use wsdl2h -L to remove this @note and all other @note comments.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE GENERATED soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2019, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://tempuri.org/ns.xsd/face.wsdl                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * $CONTAINER                                                                 *
 *   std::vector                                                              *
 *                                                                            *
\******************************************************************************/

#include <vector>
template <class T> class std::vector;

/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to 'typemap.dat' then rerun wsdl2h (use wsdl2h -t typemap.dat):

ns1 = "http://tempuri.org/ns.xsd/face.wsdl"
ns2 = "http://tempuri.org/ns.xsd"

*/

#define SOAP_NAMESPACE_OF_ns2	"http://tempuri.org/ns.xsd"
//gsoap ns2   schema namespace:	http://tempuri.org/ns.xsd
//gsoap ns2   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/

/// Built-in type "SOAP-ENC:Array".
class SOAP_ENC__Array
{ public:
/// Pointer to array of XML strings
    _XML *__ptr;
/// Size of the array
    int __size;
};


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


class ns2__SingleFaceInfo;

class ns2__FaceRes;

class Array10Offloat;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://tempuri.org/ns.xsd                                                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://tempuri.org/ns.xsd                                                *
 *                                                                            *
\******************************************************************************/

/// @brief "http://tempuri.org/ns.xsd":SingleFaceInfo is a complexType.
///
/// @note class ns2__SingleFaceInfo operations:
/// - ns2__SingleFaceInfo* soap_new_ns2__SingleFaceInfo(soap*) allocate and default initialize
/// - ns2__SingleFaceInfo* soap_new_ns2__SingleFaceInfo(soap*, int num) allocate and default initialize an array
/// - ns2__SingleFaceInfo* soap_new_req_ns2__SingleFaceInfo(soap*, ...) allocate, set required members
/// - ns2__SingleFaceInfo* soap_new_set_ns2__SingleFaceInfo(soap*, ...) allocate, set all public members
/// - ns2__SingleFaceInfo::soap_default(soap*) default initialize members
/// - int soap_read_ns2__SingleFaceInfo(soap*, ns2__SingleFaceInfo*) deserialize from a stream
/// - int soap_write_ns2__SingleFaceInfo(soap*, ns2__SingleFaceInfo*) serialize to a stream
/// - ns2__SingleFaceInfo* ns2__SingleFaceInfo::soap_dup(soap*) returns deep copy of ns2__SingleFaceInfo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__SingleFaceInfo::soap_del() deep deletes ns2__SingleFaceInfo data members, use only after ns2__SingleFaceInfo::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__SingleFaceInfo::soap_type() returns SOAP_TYPE_ns2__SingleFaceInfo or derived type identifier
class ns2__SingleFaceInfo
{ public:
/// Element "x1" of type xs:float.
    float                                x1                             1;	///< Required element.
/// Element "y1" of type xs:float.
    float                                y1                             1;	///< Required element.
/// Element "x2" of type xs:float.
    float                                x2                             1;	///< Required element.
/// Element "y2" of type xs:float.
    float                                y2                             1;	///< Required element.
/// Element "score" of type xs:float.
    float                                score                          1;	///< Required element.
/// Element "landmarks" of type "http://tempuri.org/ns.xsd":Array10Offloat.
    Array10Offloat*                      landmarks                      1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://tempuri.org/ns.xsd":FaceRes is a complexType.
///
/// @note class ns2__FaceRes operations:
/// - ns2__FaceRes* soap_new_ns2__FaceRes(soap*) allocate and default initialize
/// - ns2__FaceRes* soap_new_ns2__FaceRes(soap*, int num) allocate and default initialize an array
/// - ns2__FaceRes* soap_new_req_ns2__FaceRes(soap*, ...) allocate, set required members
/// - ns2__FaceRes* soap_new_set_ns2__FaceRes(soap*, ...) allocate, set all public members
/// - ns2__FaceRes::soap_default(soap*) default initialize members
/// - int soap_read_ns2__FaceRes(soap*, ns2__FaceRes*) deserialize from a stream
/// - int soap_write_ns2__FaceRes(soap*, ns2__FaceRes*) serialize to a stream
/// - ns2__FaceRes* ns2__FaceRes::soap_dup(soap*) returns deep copy of ns2__FaceRes, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__FaceRes::soap_del() deep deletes ns2__FaceRes data members, use only after ns2__FaceRes::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__FaceRes::soap_type() returns SOAP_TYPE_ns2__FaceRes or derived type identifier
class ns2__FaceRes
{ public:
/// Vector of ns2__SingleFaceInfo* of length 0..unbounded.
    std::vector<ns2__SingleFaceInfo*   > item                           0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://tempuri.org/ns.xsd":Array10Offloat is a complexType with complexContent restriction of type SOAP-ENC:Array.
///
/// @note class Array10Offloat operations:
/// - Array10Offloat* soap_new_Array10Offloat(soap*) allocate and default initialize
/// - Array10Offloat* soap_new_Array10Offloat(soap*, int num) allocate and default initialize an array
/// - Array10Offloat* soap_new_req_Array10Offloat(soap*, ...) allocate, set required members
/// - Array10Offloat* soap_new_set_Array10Offloat(soap*, ...) allocate, set all public members
/// - Array10Offloat::soap_default(soap*) default initialize members
/// - int soap_read_Array10Offloat(soap*, Array10Offloat*) deserialize from a stream
/// - int soap_write_Array10Offloat(soap*, Array10Offloat*) serialize to a stream
/// - Array10Offloat* Array10Offloat::soap_dup(soap*) returns deep copy of Array10Offloat, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - Array10Offloat::soap_del() deep deletes Array10Offloat data members, use only after Array10Offloat::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int Array10Offloat::soap_type() returns SOAP_TYPE_Array10Offloat or derived type identifier
/// SOAP encoded array of values of type xs:float.
class Array10Offloat
{ public:
/// Pointer to dynamic array of elements <item> of type float.
    float                               *__ptritem                     ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://tempuri.org/ns.xsd                                                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://tempuri.org/ns.xsd                                                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns2  service name:	face 
//gsoap ns2  service type:	facePortType 
//gsoap ns2  service port:	http://localhost:80 
//gsoap ns2  service namespace:	http://tempuri.org/ns.xsd 
//gsoap ns2  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage face Definitions

@section face_bindings Service Bindings

  - @ref face

@section face_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/** @page face Binding "face"

@section face_service Service Documentation "face"
gSOAP 2.8.96 generated service definition

@section face_operations Operations of Binding "face"

  - @ref ns2__FaceDetectByImgpath

  - @ref ns2__FaceDetectByBase64

@section face_ports Default endpoints of Binding "face"

  - http://localhost:80

@note Use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   face                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns2__FaceDetectByImgpath                                                 *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns2__FaceDetectByImgpathResponse" of operation "ns2__FaceDetectByImgpath".
struct ns2__FaceDetectByImgpathResponse
{
    ns2__FaceRes*                       :face_res;	///< Output parameter, :unqualified name as per RPC encoding
};

/** Operation "ns2__FaceDetectByImgpath" of service binding "face".
Service definition of function ns__FaceDetectByImgpath

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://localhost:80

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns2__FaceDetectByImgpath(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         img_path,
    // output parameters:
    struct ns2__FaceDetectByImgpathResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns2__FaceDetectByImgpath(
    struct soap *soap,
    // input parameters:
    std::string                         img_path,
    // output parameters:
    struct ns2__FaceDetectByImgpathResponse&
  );
@endcode

C++ proxy class (defined in soapfaceProxy.h generated with soapcpp2):
@code
  class faceProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapfaceService.h generated with soapcpp2):
@code
  class faceService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns2  service method-protocol:	FaceDetectByImgpath SOAP
//gsoap ns2  service method-style:	FaceDetectByImgpath rpc
//gsoap ns2  service method-encoding:	FaceDetectByImgpath http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns2  service method-action:	FaceDetectByImgpath ""
//gsoap ns2  service method-output-action:	FaceDetectByImgpath Response
int ns2__FaceDetectByImgpath(
    std::string                         :img_path,	///< Input parameter, :unqualified name as per RPC encoding
    struct ns2__FaceDetectByImgpathResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns2__FaceDetectByBase64                                                  *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns2__FaceDetectByBase64Response" of operation "ns2__FaceDetectByBase64".
struct ns2__FaceDetectByBase64Response
{
    ns2__FaceRes*                       :face_res;	///< Output parameter, :unqualified name as per RPC encoding
};

/** Operation "ns2__FaceDetectByBase64" of service binding "face".
Service definition of function ns__FaceDetectByBase64

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://localhost:80

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns2__FaceDetectByBase64(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         img_base64,
    // output parameters:
    struct ns2__FaceDetectByBase64Response&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns2__FaceDetectByBase64(
    struct soap *soap,
    // input parameters:
    std::string                         img_base64,
    // output parameters:
    struct ns2__FaceDetectByBase64Response&
  );
@endcode

C++ proxy class (defined in soapfaceProxy.h generated with soapcpp2):
@code
  class faceProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapfaceService.h generated with soapcpp2):
@code
  class faceService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns2  service method-protocol:	FaceDetectByBase64 SOAP
//gsoap ns2  service method-style:	FaceDetectByBase64 rpc
//gsoap ns2  service method-encoding:	FaceDetectByBase64 http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns2  service method-action:	FaceDetectByBase64 ""
//gsoap ns2  service method-output-action:	FaceDetectByBase64 Response
int ns2__FaceDetectByBase64(
    std::string                         :img_base64,	///< Input parameter, :unqualified name as per RPC encoding
    struct ns2__FaceDetectByBase64Response&	///< Output response struct parameter
);

/** @page face Binding "face"

@section face_policy_enablers Policy Enablers of Binding "face"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/** @page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings that are contractually bound by WSDLs and
are auto-generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data
bindings are adopted from XML schemas as part of the WSDL types section or when
running wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

@note The following readers and writers are C/C++ data type (de)serializers
auto-generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

@note Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

@note Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

@note The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_set_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_set_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


*/

/**

@section ns2 Top-level root elements of schema "http://tempuri.org/ns.xsd"

*/

/* End of face.h */
