/* soapH.h
   Generated by gSOAP 2.8.96 for face.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, const char*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_float_DEFINED
#define SOAP_TYPE_float_DEFINED

inline void soap_default_float(struct soap *soap, float *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_float
	*a = SOAP_DEFAULT_float;
#else
	*a = (float)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap*, const char*, int, const float *, const char*);
SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap*, const char*, float *, const char*);

SOAP_FMAC3 float * SOAP_FMAC4 soap_new_float(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap*, const float *, const char*, const char*);

inline int soap_write_float(struct soap *soap, float const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_float(soap, p, "float", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_float(struct soap *soap, const char *URL, float const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_float(soap, p, "float", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_float(struct soap *soap, const char *URL, float const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_float(soap, p, "float", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_float(struct soap *soap, const char *URL, float const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_float(soap, p, "float", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap*, float *, const char*, const char*);

inline int soap_read_float(struct soap *soap, float *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_float(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_float(struct soap *soap, const char *URL, float *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_float(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_float(struct soap *soap, float *p)
{
	if (::soap_read_float(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED

inline void soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_std__string(struct soap *soap, std::string *p)
{
	if (::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_Array10Offloat_DEFINED
#define SOAP_TYPE_Array10Offloat_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_Array10Offloat(struct soap*, const char*, int, const Array10Offloat *, const char*);
SOAP_FMAC3 Array10Offloat * SOAP_FMAC4 soap_in_Array10Offloat(struct soap*, const char*, Array10Offloat *, const char*);
SOAP_FMAC1 Array10Offloat * SOAP_FMAC2 soap_instantiate_Array10Offloat(struct soap*, int, const char*, const char*, size_t*);

inline Array10Offloat * soap_new_Array10Offloat(struct soap *soap, int n = -1)
{
	return soap_instantiate_Array10Offloat(soap, n, NULL, NULL, NULL);
}

inline Array10Offloat * soap_new_req_Array10Offloat(
	struct soap *soap)
{
	Array10Offloat *_p = ::soap_new_Array10Offloat(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline Array10Offloat * soap_new_set_Array10Offloat(
	struct soap *soap,
	float *__ptritem,
	int __size)
{
	Array10Offloat *_p = ::soap_new_Array10Offloat(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->Array10Offloat::__ptritem = __ptritem;
		_p->Array10Offloat::__size = __size;
	}
	return _p;
}

inline int soap_write_Array10Offloat(struct soap *soap, Array10Offloat const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "SOAP-ENC:Array", p->soap_type() == SOAP_TYPE_Array10Offloat ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_Array10Offloat(struct soap *soap, const char *URL, Array10Offloat const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "SOAP-ENC:Array", p->soap_type() == SOAP_TYPE_Array10Offloat ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_Array10Offloat(struct soap *soap, const char *URL, Array10Offloat const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "SOAP-ENC:Array", p->soap_type() == SOAP_TYPE_Array10Offloat ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_Array10Offloat(struct soap *soap, const char *URL, Array10Offloat const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "SOAP-ENC:Array", p->soap_type() == SOAP_TYPE_Array10Offloat ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 Array10Offloat * SOAP_FMAC4 soap_get_Array10Offloat(struct soap*, Array10Offloat *, const char*, const char*);

inline int soap_read_Array10Offloat(struct soap *soap, Array10Offloat *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_Array10Offloat(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_Array10Offloat(struct soap *soap, const char *URL, Array10Offloat *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_Array10Offloat(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_Array10Offloat(struct soap *soap, Array10Offloat *p)
{
	if (::soap_read_Array10Offloat(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__FaceRes_DEFINED
#define SOAP_TYPE_ns2__FaceRes_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__FaceRes(struct soap*, const char*, int, const ns2__FaceRes *, const char*);
SOAP_FMAC3 ns2__FaceRes * SOAP_FMAC4 soap_in_ns2__FaceRes(struct soap*, const char*, ns2__FaceRes *, const char*);
SOAP_FMAC1 ns2__FaceRes * SOAP_FMAC2 soap_instantiate_ns2__FaceRes(struct soap*, int, const char*, const char*, size_t*);

inline ns2__FaceRes * soap_new_ns2__FaceRes(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__FaceRes(soap, n, NULL, NULL, NULL);
}

inline ns2__FaceRes * soap_new_req_ns2__FaceRes(
	struct soap *soap)
{
	ns2__FaceRes *_p = ::soap_new_ns2__FaceRes(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__FaceRes * soap_new_set_ns2__FaceRes(
	struct soap *soap,
	const std::vector<ns2__SingleFaceInfo *> & item)
{
	ns2__FaceRes *_p = ::soap_new_ns2__FaceRes(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__FaceRes::item = item;
	}
	return _p;
}

inline int soap_write_ns2__FaceRes(struct soap *soap, ns2__FaceRes const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:FaceRes", p->soap_type() == SOAP_TYPE_ns2__FaceRes ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__FaceRes(struct soap *soap, const char *URL, ns2__FaceRes const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:FaceRes", p->soap_type() == SOAP_TYPE_ns2__FaceRes ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__FaceRes(struct soap *soap, const char *URL, ns2__FaceRes const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:FaceRes", p->soap_type() == SOAP_TYPE_ns2__FaceRes ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__FaceRes(struct soap *soap, const char *URL, ns2__FaceRes const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:FaceRes", p->soap_type() == SOAP_TYPE_ns2__FaceRes ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__FaceRes * SOAP_FMAC4 soap_get_ns2__FaceRes(struct soap*, ns2__FaceRes *, const char*, const char*);

inline int soap_read_ns2__FaceRes(struct soap *soap, ns2__FaceRes *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__FaceRes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__FaceRes(struct soap *soap, const char *URL, ns2__FaceRes *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__FaceRes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__FaceRes(struct soap *soap, ns2__FaceRes *p)
{
	if (::soap_read_ns2__FaceRes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__SingleFaceInfo_DEFINED
#define SOAP_TYPE_ns2__SingleFaceInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__SingleFaceInfo(struct soap*, const char*, int, const ns2__SingleFaceInfo *, const char*);
SOAP_FMAC3 ns2__SingleFaceInfo * SOAP_FMAC4 soap_in_ns2__SingleFaceInfo(struct soap*, const char*, ns2__SingleFaceInfo *, const char*);
SOAP_FMAC1 ns2__SingleFaceInfo * SOAP_FMAC2 soap_instantiate_ns2__SingleFaceInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns2__SingleFaceInfo * soap_new_ns2__SingleFaceInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__SingleFaceInfo(soap, n, NULL, NULL, NULL);
}

inline ns2__SingleFaceInfo * soap_new_req_ns2__SingleFaceInfo(
	struct soap *soap,
	float x1,
	float y1,
	float x2,
	float y2,
	float score,
	Array10Offloat *landmarks)
{
	ns2__SingleFaceInfo *_p = ::soap_new_ns2__SingleFaceInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__SingleFaceInfo::x1 = x1;
		_p->ns2__SingleFaceInfo::y1 = y1;
		_p->ns2__SingleFaceInfo::x2 = x2;
		_p->ns2__SingleFaceInfo::y2 = y2;
		_p->ns2__SingleFaceInfo::score = score;
		_p->ns2__SingleFaceInfo::landmarks = landmarks;
	}
	return _p;
}

inline ns2__SingleFaceInfo * soap_new_set_ns2__SingleFaceInfo(
	struct soap *soap,
	float x1,
	float y1,
	float x2,
	float y2,
	float score,
	Array10Offloat *landmarks)
{
	ns2__SingleFaceInfo *_p = ::soap_new_ns2__SingleFaceInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__SingleFaceInfo::x1 = x1;
		_p->ns2__SingleFaceInfo::y1 = y1;
		_p->ns2__SingleFaceInfo::x2 = x2;
		_p->ns2__SingleFaceInfo::y2 = y2;
		_p->ns2__SingleFaceInfo::score = score;
		_p->ns2__SingleFaceInfo::landmarks = landmarks;
	}
	return _p;
}

inline int soap_write_ns2__SingleFaceInfo(struct soap *soap, ns2__SingleFaceInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:SingleFaceInfo", p->soap_type() == SOAP_TYPE_ns2__SingleFaceInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__SingleFaceInfo(struct soap *soap, const char *URL, ns2__SingleFaceInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:SingleFaceInfo", p->soap_type() == SOAP_TYPE_ns2__SingleFaceInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__SingleFaceInfo(struct soap *soap, const char *URL, ns2__SingleFaceInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:SingleFaceInfo", p->soap_type() == SOAP_TYPE_ns2__SingleFaceInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__SingleFaceInfo(struct soap *soap, const char *URL, ns2__SingleFaceInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:SingleFaceInfo", p->soap_type() == SOAP_TYPE_ns2__SingleFaceInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__SingleFaceInfo * SOAP_FMAC4 soap_get_ns2__SingleFaceInfo(struct soap*, ns2__SingleFaceInfo *, const char*, const char*);

inline int soap_read_ns2__SingleFaceInfo(struct soap *soap, ns2__SingleFaceInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__SingleFaceInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__SingleFaceInfo(struct soap *soap, const char *URL, ns2__SingleFaceInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__SingleFaceInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__SingleFaceInfo(struct soap *soap, ns2__SingleFaceInfo *p)
{
	if (::soap_read_ns2__SingleFaceInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_SOAP_ENC__Array_DEFINED
#define SOAP_TYPE_SOAP_ENC__Array_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENC__Array(struct soap*, const char*, int, const SOAP_ENC__Array *, const char*);
SOAP_FMAC3 SOAP_ENC__Array * SOAP_FMAC4 soap_in_SOAP_ENC__Array(struct soap*, const char*, SOAP_ENC__Array *, const char*);
SOAP_FMAC1 SOAP_ENC__Array * SOAP_FMAC2 soap_instantiate_SOAP_ENC__Array(struct soap*, int, const char*, const char*, size_t*);

inline SOAP_ENC__Array * soap_new_SOAP_ENC__Array(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENC__Array(soap, n, NULL, NULL, NULL);
}

inline SOAP_ENC__Array * soap_new_req_SOAP_ENC__Array(
	struct soap *soap)
{
	SOAP_ENC__Array *_p = ::soap_new_SOAP_ENC__Array(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline SOAP_ENC__Array * soap_new_set_SOAP_ENC__Array(
	struct soap *soap,
	char **__ptr,
	int __size)
{
	SOAP_ENC__Array *_p = ::soap_new_SOAP_ENC__Array(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->SOAP_ENC__Array::__ptr = __ptr;
		_p->SOAP_ENC__Array::__size = __size;
	}
	return _p;
}

inline int soap_write_SOAP_ENC__Array(struct soap *soap, SOAP_ENC__Array const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "SOAP-ENC:Array", p->soap_type() == SOAP_TYPE_SOAP_ENC__Array ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENC__Array(struct soap *soap, const char *URL, SOAP_ENC__Array const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "SOAP-ENC:Array", p->soap_type() == SOAP_TYPE_SOAP_ENC__Array ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENC__Array(struct soap *soap, const char *URL, SOAP_ENC__Array const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "SOAP-ENC:Array", p->soap_type() == SOAP_TYPE_SOAP_ENC__Array ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENC__Array(struct soap *soap, const char *URL, SOAP_ENC__Array const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "SOAP-ENC:Array", p->soap_type() == SOAP_TYPE_SOAP_ENC__Array ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 SOAP_ENC__Array * SOAP_FMAC4 soap_get_SOAP_ENC__Array(struct soap*, SOAP_ENC__Array *, const char*, const char*);

inline int soap_read_SOAP_ENC__Array(struct soap *soap, SOAP_ENC__Array *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENC__Array(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENC__Array(struct soap *soap, const char *URL, SOAP_ENC__Array *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENC__Array(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENC__Array(struct soap *soap, SOAP_ENC__Array *p)
{
	if (::soap_read_SOAP_ENC__Array(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef SOAP_TYPE_ns2__FaceDetectByBase64_DEFINED
#define SOAP_TYPE_ns2__FaceDetectByBase64_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__FaceDetectByBase64(struct soap*, struct ns2__FaceDetectByBase64 *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__FaceDetectByBase64(struct soap*, const struct ns2__FaceDetectByBase64 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__FaceDetectByBase64(struct soap*, const char*, int, const struct ns2__FaceDetectByBase64 *, const char*);
SOAP_FMAC3 struct ns2__FaceDetectByBase64 * SOAP_FMAC4 soap_in_ns2__FaceDetectByBase64(struct soap*, const char*, struct ns2__FaceDetectByBase64 *, const char*);
SOAP_FMAC1 struct ns2__FaceDetectByBase64 * SOAP_FMAC2 soap_instantiate_ns2__FaceDetectByBase64(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__FaceDetectByBase64 * soap_new_ns2__FaceDetectByBase64(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__FaceDetectByBase64(soap, n, NULL, NULL, NULL);
}

inline struct ns2__FaceDetectByBase64 * soap_new_req_ns2__FaceDetectByBase64(
	struct soap *soap,
	const std::string& img_base64)
{
	struct ns2__FaceDetectByBase64 *_p = ::soap_new_ns2__FaceDetectByBase64(soap);
	if (_p)
	{	::soap_default_ns2__FaceDetectByBase64(soap, _p);
		_p->img_base64 = img_base64;
	}
	return _p;
}

inline struct ns2__FaceDetectByBase64 * soap_new_set_ns2__FaceDetectByBase64(
	struct soap *soap,
	const std::string& img_base64)
{
	struct ns2__FaceDetectByBase64 *_p = ::soap_new_ns2__FaceDetectByBase64(soap);
	if (_p)
	{	::soap_default_ns2__FaceDetectByBase64(soap, _p);
		_p->img_base64 = img_base64;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__FaceDetectByBase64(struct soap*, const struct ns2__FaceDetectByBase64 *, const char*, const char*);

inline int soap_write_ns2__FaceDetectByBase64(struct soap *soap, struct ns2__FaceDetectByBase64 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns2__FaceDetectByBase64(soap, p), 0) || ::soap_put_ns2__FaceDetectByBase64(soap, p, "ns2:FaceDetectByBase64", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__FaceDetectByBase64(struct soap *soap, const char *URL, struct ns2__FaceDetectByBase64 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__FaceDetectByBase64(soap, p), 0) || ::soap_put_ns2__FaceDetectByBase64(soap, p, "ns2:FaceDetectByBase64", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__FaceDetectByBase64(struct soap *soap, const char *URL, struct ns2__FaceDetectByBase64 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__FaceDetectByBase64(soap, p), 0) || ::soap_put_ns2__FaceDetectByBase64(soap, p, "ns2:FaceDetectByBase64", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__FaceDetectByBase64(struct soap *soap, const char *URL, struct ns2__FaceDetectByBase64 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__FaceDetectByBase64(soap, p), 0) || ::soap_put_ns2__FaceDetectByBase64(soap, p, "ns2:FaceDetectByBase64", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns2__FaceDetectByBase64 * SOAP_FMAC4 soap_get_ns2__FaceDetectByBase64(struct soap*, struct ns2__FaceDetectByBase64 *, const char*, const char*);

inline int soap_read_ns2__FaceDetectByBase64(struct soap *soap, struct ns2__FaceDetectByBase64 *p)
{
	if (p)
	{	::soap_default_ns2__FaceDetectByBase64(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns2__FaceDetectByBase64(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__FaceDetectByBase64(struct soap *soap, const char *URL, struct ns2__FaceDetectByBase64 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__FaceDetectByBase64(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__FaceDetectByBase64(struct soap *soap, struct ns2__FaceDetectByBase64 *p)
{
	if (::soap_read_ns2__FaceDetectByBase64(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__FaceDetectByBase64Response_DEFINED
#define SOAP_TYPE_ns2__FaceDetectByBase64Response_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__FaceDetectByBase64Response(struct soap*, struct ns2__FaceDetectByBase64Response *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__FaceDetectByBase64Response(struct soap*, const struct ns2__FaceDetectByBase64Response *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__FaceDetectByBase64Response(struct soap*, const char*, int, const struct ns2__FaceDetectByBase64Response *, const char*);
SOAP_FMAC3 struct ns2__FaceDetectByBase64Response * SOAP_FMAC4 soap_in_ns2__FaceDetectByBase64Response(struct soap*, const char*, struct ns2__FaceDetectByBase64Response *, const char*);
SOAP_FMAC1 struct ns2__FaceDetectByBase64Response * SOAP_FMAC2 soap_instantiate_ns2__FaceDetectByBase64Response(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__FaceDetectByBase64Response * soap_new_ns2__FaceDetectByBase64Response(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__FaceDetectByBase64Response(soap, n, NULL, NULL, NULL);
}

inline struct ns2__FaceDetectByBase64Response * soap_new_req_ns2__FaceDetectByBase64Response(
	struct soap *soap)
{
	struct ns2__FaceDetectByBase64Response *_p = ::soap_new_ns2__FaceDetectByBase64Response(soap);
	if (_p)
	{	::soap_default_ns2__FaceDetectByBase64Response(soap, _p);
	}
	return _p;
}

inline struct ns2__FaceDetectByBase64Response * soap_new_set_ns2__FaceDetectByBase64Response(
	struct soap *soap,
	ns2__FaceRes *face_res)
{
	struct ns2__FaceDetectByBase64Response *_p = ::soap_new_ns2__FaceDetectByBase64Response(soap);
	if (_p)
	{	::soap_default_ns2__FaceDetectByBase64Response(soap, _p);
		_p->face_res = face_res;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__FaceDetectByBase64Response(struct soap*, const struct ns2__FaceDetectByBase64Response *, const char*, const char*);

inline int soap_write_ns2__FaceDetectByBase64Response(struct soap *soap, struct ns2__FaceDetectByBase64Response const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns2__FaceDetectByBase64Response(soap, p), 0) || ::soap_put_ns2__FaceDetectByBase64Response(soap, p, "ns2:FaceDetectByBase64Response", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__FaceDetectByBase64Response(struct soap *soap, const char *URL, struct ns2__FaceDetectByBase64Response const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__FaceDetectByBase64Response(soap, p), 0) || ::soap_put_ns2__FaceDetectByBase64Response(soap, p, "ns2:FaceDetectByBase64Response", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__FaceDetectByBase64Response(struct soap *soap, const char *URL, struct ns2__FaceDetectByBase64Response const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__FaceDetectByBase64Response(soap, p), 0) || ::soap_put_ns2__FaceDetectByBase64Response(soap, p, "ns2:FaceDetectByBase64Response", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__FaceDetectByBase64Response(struct soap *soap, const char *URL, struct ns2__FaceDetectByBase64Response const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__FaceDetectByBase64Response(soap, p), 0) || ::soap_put_ns2__FaceDetectByBase64Response(soap, p, "ns2:FaceDetectByBase64Response", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns2__FaceDetectByBase64Response * SOAP_FMAC4 soap_get_ns2__FaceDetectByBase64Response(struct soap*, struct ns2__FaceDetectByBase64Response *, const char*, const char*);

inline int soap_read_ns2__FaceDetectByBase64Response(struct soap *soap, struct ns2__FaceDetectByBase64Response *p)
{
	if (p)
	{	::soap_default_ns2__FaceDetectByBase64Response(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns2__FaceDetectByBase64Response(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__FaceDetectByBase64Response(struct soap *soap, const char *URL, struct ns2__FaceDetectByBase64Response *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__FaceDetectByBase64Response(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__FaceDetectByBase64Response(struct soap *soap, struct ns2__FaceDetectByBase64Response *p)
{
	if (::soap_read_ns2__FaceDetectByBase64Response(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__FaceDetectByImgpath_DEFINED
#define SOAP_TYPE_ns2__FaceDetectByImgpath_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__FaceDetectByImgpath(struct soap*, struct ns2__FaceDetectByImgpath *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__FaceDetectByImgpath(struct soap*, const struct ns2__FaceDetectByImgpath *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__FaceDetectByImgpath(struct soap*, const char*, int, const struct ns2__FaceDetectByImgpath *, const char*);
SOAP_FMAC3 struct ns2__FaceDetectByImgpath * SOAP_FMAC4 soap_in_ns2__FaceDetectByImgpath(struct soap*, const char*, struct ns2__FaceDetectByImgpath *, const char*);
SOAP_FMAC1 struct ns2__FaceDetectByImgpath * SOAP_FMAC2 soap_instantiate_ns2__FaceDetectByImgpath(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__FaceDetectByImgpath * soap_new_ns2__FaceDetectByImgpath(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__FaceDetectByImgpath(soap, n, NULL, NULL, NULL);
}

inline struct ns2__FaceDetectByImgpath * soap_new_req_ns2__FaceDetectByImgpath(
	struct soap *soap,
	const std::string& img_path)
{
	struct ns2__FaceDetectByImgpath *_p = ::soap_new_ns2__FaceDetectByImgpath(soap);
	if (_p)
	{	::soap_default_ns2__FaceDetectByImgpath(soap, _p);
		_p->img_path = img_path;
	}
	return _p;
}

inline struct ns2__FaceDetectByImgpath * soap_new_set_ns2__FaceDetectByImgpath(
	struct soap *soap,
	const std::string& img_path)
{
	struct ns2__FaceDetectByImgpath *_p = ::soap_new_ns2__FaceDetectByImgpath(soap);
	if (_p)
	{	::soap_default_ns2__FaceDetectByImgpath(soap, _p);
		_p->img_path = img_path;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__FaceDetectByImgpath(struct soap*, const struct ns2__FaceDetectByImgpath *, const char*, const char*);

inline int soap_write_ns2__FaceDetectByImgpath(struct soap *soap, struct ns2__FaceDetectByImgpath const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns2__FaceDetectByImgpath(soap, p), 0) || ::soap_put_ns2__FaceDetectByImgpath(soap, p, "ns2:FaceDetectByImgpath", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__FaceDetectByImgpath(struct soap *soap, const char *URL, struct ns2__FaceDetectByImgpath const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__FaceDetectByImgpath(soap, p), 0) || ::soap_put_ns2__FaceDetectByImgpath(soap, p, "ns2:FaceDetectByImgpath", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__FaceDetectByImgpath(struct soap *soap, const char *URL, struct ns2__FaceDetectByImgpath const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__FaceDetectByImgpath(soap, p), 0) || ::soap_put_ns2__FaceDetectByImgpath(soap, p, "ns2:FaceDetectByImgpath", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__FaceDetectByImgpath(struct soap *soap, const char *URL, struct ns2__FaceDetectByImgpath const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__FaceDetectByImgpath(soap, p), 0) || ::soap_put_ns2__FaceDetectByImgpath(soap, p, "ns2:FaceDetectByImgpath", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns2__FaceDetectByImgpath * SOAP_FMAC4 soap_get_ns2__FaceDetectByImgpath(struct soap*, struct ns2__FaceDetectByImgpath *, const char*, const char*);

inline int soap_read_ns2__FaceDetectByImgpath(struct soap *soap, struct ns2__FaceDetectByImgpath *p)
{
	if (p)
	{	::soap_default_ns2__FaceDetectByImgpath(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns2__FaceDetectByImgpath(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__FaceDetectByImgpath(struct soap *soap, const char *URL, struct ns2__FaceDetectByImgpath *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__FaceDetectByImgpath(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__FaceDetectByImgpath(struct soap *soap, struct ns2__FaceDetectByImgpath *p)
{
	if (::soap_read_ns2__FaceDetectByImgpath(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__FaceDetectByImgpathResponse_DEFINED
#define SOAP_TYPE_ns2__FaceDetectByImgpathResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__FaceDetectByImgpathResponse(struct soap*, struct ns2__FaceDetectByImgpathResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__FaceDetectByImgpathResponse(struct soap*, const struct ns2__FaceDetectByImgpathResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__FaceDetectByImgpathResponse(struct soap*, const char*, int, const struct ns2__FaceDetectByImgpathResponse *, const char*);
SOAP_FMAC3 struct ns2__FaceDetectByImgpathResponse * SOAP_FMAC4 soap_in_ns2__FaceDetectByImgpathResponse(struct soap*, const char*, struct ns2__FaceDetectByImgpathResponse *, const char*);
SOAP_FMAC1 struct ns2__FaceDetectByImgpathResponse * SOAP_FMAC2 soap_instantiate_ns2__FaceDetectByImgpathResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__FaceDetectByImgpathResponse * soap_new_ns2__FaceDetectByImgpathResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__FaceDetectByImgpathResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns2__FaceDetectByImgpathResponse * soap_new_req_ns2__FaceDetectByImgpathResponse(
	struct soap *soap)
{
	struct ns2__FaceDetectByImgpathResponse *_p = ::soap_new_ns2__FaceDetectByImgpathResponse(soap);
	if (_p)
	{	::soap_default_ns2__FaceDetectByImgpathResponse(soap, _p);
	}
	return _p;
}

inline struct ns2__FaceDetectByImgpathResponse * soap_new_set_ns2__FaceDetectByImgpathResponse(
	struct soap *soap,
	ns2__FaceRes *face_res)
{
	struct ns2__FaceDetectByImgpathResponse *_p = ::soap_new_ns2__FaceDetectByImgpathResponse(soap);
	if (_p)
	{	::soap_default_ns2__FaceDetectByImgpathResponse(soap, _p);
		_p->face_res = face_res;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__FaceDetectByImgpathResponse(struct soap*, const struct ns2__FaceDetectByImgpathResponse *, const char*, const char*);

inline int soap_write_ns2__FaceDetectByImgpathResponse(struct soap *soap, struct ns2__FaceDetectByImgpathResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns2__FaceDetectByImgpathResponse(soap, p), 0) || ::soap_put_ns2__FaceDetectByImgpathResponse(soap, p, "ns2:FaceDetectByImgpathResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__FaceDetectByImgpathResponse(struct soap *soap, const char *URL, struct ns2__FaceDetectByImgpathResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__FaceDetectByImgpathResponse(soap, p), 0) || ::soap_put_ns2__FaceDetectByImgpathResponse(soap, p, "ns2:FaceDetectByImgpathResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__FaceDetectByImgpathResponse(struct soap *soap, const char *URL, struct ns2__FaceDetectByImgpathResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__FaceDetectByImgpathResponse(soap, p), 0) || ::soap_put_ns2__FaceDetectByImgpathResponse(soap, p, "ns2:FaceDetectByImgpathResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__FaceDetectByImgpathResponse(struct soap *soap, const char *URL, struct ns2__FaceDetectByImgpathResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__FaceDetectByImgpathResponse(soap, p), 0) || ::soap_put_ns2__FaceDetectByImgpathResponse(soap, p, "ns2:FaceDetectByImgpathResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns2__FaceDetectByImgpathResponse * SOAP_FMAC4 soap_get_ns2__FaceDetectByImgpathResponse(struct soap*, struct ns2__FaceDetectByImgpathResponse *, const char*, const char*);

inline int soap_read_ns2__FaceDetectByImgpathResponse(struct soap *soap, struct ns2__FaceDetectByImgpathResponse *p)
{
	if (p)
	{	::soap_default_ns2__FaceDetectByImgpathResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns2__FaceDetectByImgpathResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__FaceDetectByImgpathResponse(struct soap *soap, const char *URL, struct ns2__FaceDetectByImgpathResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__FaceDetectByImgpathResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__FaceDetectByImgpathResponse(struct soap *soap, struct ns2__FaceDetectByImgpathResponse *p)
{
	if (::soap_read_ns2__FaceDetectByImgpathResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTons2__FaceRes_DEFINED
#define SOAP_TYPE_PointerTons2__FaceRes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__FaceRes(struct soap*, ns2__FaceRes *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__FaceRes(struct soap*, const char *, int, ns2__FaceRes *const*, const char *);
SOAP_FMAC3 ns2__FaceRes ** SOAP_FMAC4 soap_in_PointerTons2__FaceRes(struct soap*, const char*, ns2__FaceRes **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__FaceRes(struct soap*, ns2__FaceRes *const*, const char*, const char*);
SOAP_FMAC3 ns2__FaceRes ** SOAP_FMAC4 soap_get_PointerTons2__FaceRes(struct soap*, ns2__FaceRes **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofloat_DEFINED
#define SOAP_TYPE_PointerTofloat_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofloat(struct soap*, float *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofloat(struct soap*, const char *, int, float *const*, const char *);
SOAP_FMAC3 float ** SOAP_FMAC4 soap_in_PointerTofloat(struct soap*, const char*, float **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofloat(struct soap*, float *const*, const char*, const char*);
SOAP_FMAC3 float ** SOAP_FMAC4 soap_get_PointerTofloat(struct soap*, float **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__SingleFaceInfo_DEFINED
#define SOAP_TYPE_PointerTons2__SingleFaceInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__SingleFaceInfo(struct soap*, ns2__SingleFaceInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__SingleFaceInfo(struct soap*, const char *, int, ns2__SingleFaceInfo *const*, const char *);
SOAP_FMAC3 ns2__SingleFaceInfo ** SOAP_FMAC4 soap_in_PointerTons2__SingleFaceInfo(struct soap*, const char*, ns2__SingleFaceInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__SingleFaceInfo(struct soap*, ns2__SingleFaceInfo *const*, const char*, const char*);
SOAP_FMAC3 ns2__SingleFaceInfo ** SOAP_FMAC4 soap_get_PointerTons2__SingleFaceInfo(struct soap*, ns2__SingleFaceInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToArray10Offloat_DEFINED
#define SOAP_TYPE_PointerToArray10Offloat_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToArray10Offloat(struct soap*, Array10Offloat *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToArray10Offloat(struct soap*, const char *, int, Array10Offloat *const*, const char *);
SOAP_FMAC3 Array10Offloat ** SOAP_FMAC4 soap_in_PointerToArray10Offloat(struct soap*, const char*, Array10Offloat **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToArray10Offloat(struct soap*, Array10Offloat *const*, const char*, const char*);
SOAP_FMAC3 Array10Offloat ** SOAP_FMAC4 soap_get_PointerToArray10Offloat(struct soap*, Array10Offloat **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_XML_DEFINED
#define SOAP_TYPE_PointerTo_XML_DEFINED
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__SingleFaceInfo_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__SingleFaceInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__SingleFaceInfo(struct soap*, std::vector<ns2__SingleFaceInfo *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__SingleFaceInfo(struct soap*, const std::vector<ns2__SingleFaceInfo *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__SingleFaceInfo(struct soap*, const char*, int, const std::vector<ns2__SingleFaceInfo *> *, const char*);
SOAP_FMAC3 std::vector<ns2__SingleFaceInfo *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__SingleFaceInfo(struct soap*, const char*, std::vector<ns2__SingleFaceInfo *> *, const char*);
SOAP_FMAC1 std::vector<ns2__SingleFaceInfo *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__SingleFaceInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__SingleFaceInfo *>  * soap_new_std__vectorTemplateOfPointerTons2__SingleFaceInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons2__SingleFaceInfo(soap, n, NULL, NULL, NULL);
}
#endif

#endif

/* End of soapH.h */
